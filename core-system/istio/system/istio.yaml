apiVersion: source.toolkit.fluxcd.io/v1beta1
kind: HelmRepository
metadata:
  name: istio
  namespace: istio-system
  labels:
    app.kubernetes.io/part-of: istio
spec:
  interval: 1h0m0s
  url: https://istio-release.storage.googleapis.com/charts
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: istio-base
  namespace: istio-system
  labels:
    app.kubernetes.io/part-of: istio
spec:
  releaseName: istio-base
  install:
    crds: Create
  upgrade:
    crds: CreateReplace
  chart:
    spec:
      version: "${istio_version}"
      chart: base
      sourceRef:
        kind: HelmRepository
        name: istio
  interval: 1h0m0s
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: istiod
  namespace: istio-system
  labels:
    app.kubernetes.io/part-of: istio
spec:
  releaseName: istiod
  dependsOn:
    - name: istio-base
  chart:
    spec:
      version: "${istio_version}"
      chart: istiod
      sourceRef:
        kind: HelmRepository
        name: istio
  interval: 1h0m0s
  values:
    global:
      istioNamespace: istio-system
      proxy:
        resources:
          requests:
            cpu: 10m
            memory: 16Mi
    pilot:
      autoscaleEnabled: false
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: istio-gateway
  namespace: istio-system
  labels:
    app.kubernetes.io/part-of: istio
spec:
  releaseName: istio-gateway
  dependsOn:
    - name: istio-base
    - name: istiod
  chart:
    spec:
      version: "${version}"
      chart: gateway
      sourceRef:
        kind: HelmRepository
        name: istio
  interval: 1h0m0s
  values:
    autoscaling:
      enabled: false
    resources:
      requests:
        cpu: 10m
        memory: 128Mi
    service:
      type: "${service:=NodePort}"
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: istio-gateway
  namespace: istio-system
  annotations:
    # create AWS Application LoadBalancer
    kubernetes.io/ingress.class: alb
    # external type
    alb.ingress.kubernetes.io/scheme: internet-facing
    # AWS Certificate Manager certificate's ARN
    #alb.ingress.kubernetes.io/certificate-arn: "arn:aws:acm:eu-west-3:***:certificate/fcaa9fd2-1b55-48d7-92f2-e829f7bafafd"
    # open ports 80 and 443
    # alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}'
    # redirect all HTTP to HTTPS
   # alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
    # ExternalDNS settings: https://rtfm.co.ua/en/kubernetes-update-aws-route53-dns-from-an-ingress/
    #external-dns.alpha.kubernetes.io/hostname: "istio-test-alb.example.com"
spec:
  rules:
    - http:
        paths:
#          - path: /*
#            backend:
#              serviceName: ssl-redirect
#              servicePort: use-annotation
          - path: /healthz/ready
            pathType: Prefix
            backend:
              service:
                name: istio-ingressgateway
                port:
                  number: 15021
          - path: /
            pathType: Prefix
            backend:
              service:
                name: istio-ingressgateway
                port:
                  number: 80

#          - backend:
#              service:
#                name: istio-ingressgateway
#                port:
#                  number: 443
#            path: /
#            pathType: Prefix